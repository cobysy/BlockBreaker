{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/RectBounds.ts","webpack:///./src/Sprite.ts","webpack:///./src/Game.ts","webpack:///./src/Ball.ts","webpack:///./src/BallManager.ts","webpack:///./src/BonusPanel.ts","webpack:///./src/Block.ts","webpack:///./src/GameState.ts","webpack:///./src/CornerCollisionState.ts","webpack:///./src/EightPointsCollisionState.ts","webpack:///./src/Point.ts","webpack:///./src/BlockManager.ts","webpack:///./src/ScoreRenderer.ts","webpack:///./src/SessionRenderer.ts","webpack:///./src/index.ts","webpack:///./src/BlockBreaker.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CornerCollisionState_1","EightPointsCollisionState_1","RectBounds","ax","ay","bx","by","this","Error","getCornerCollisionState","me","target","CornerCollisionState","contains","getEightPointsCollisionState","centerX","Math","trunc","centerY","EightPointsCollisionState","whereCollisionAt","collision","x","y","Location","Sprite","vanished","visible","update","list","slice","forEach","index","splice","e","console","error","draw","g2d","isVanished","vanish","isVisible","setVisible","getX","setX","addX","vx","getY","setY","addY","vy","Ball_1","BallManager_1","BlockManager_1","GameState_1","ScoreRenderer_1","SessionRenderer_1","Game","runChecker","RUNCHECK_INTERVAL","getTimestamp","gameState","GameState","main","_this","game","__awaiter","run","checkImage","url","Promise","resolve","img","Image","onload","src","initResources","log","all","RESOURCE","map","then","img_ball","shift","img_block","img_bonusPanel","img_hexagonBack","img_floor","img_glossPanel","img_gameover","img_logo","img_1up","img_cursor","_a","sent","runAfterResourcesLoaded","blockManager","BlockManager","ballManager","BallManager","getBlocks","scoreRenderer","ScoreRenderer","sessionRenderer","SessionRenderer","canvas","document","getElementById","width","WIDTH","height","HEIGHT","style","cursor","eventListenInit","window","performance","now","webkitNow","Date","getTime","getContext","initialize","gameloop","render","requestAnimationFrame","init","state","setWaveCount","getWaveCount","setBallCount","getBallCount","setScore","getScore","drawImage","FLOOR_Y","State","MAIN_MENU","GAMEOVER","RETURNABLE_TO_MENU","addEventListener","preventDefault","rect","getBoundingClientRect","clientX","left","clientY","top","CLICK_WAIT","Ball","SIZE","STATUS_PANEL_X","NOW_CLICKED","mousePos","keyCode","keyPressed_space","includes","Game_1","RectBounds_1","_super","delay","_isPrepareLaunchPos","landed","__extends","isLanded","setLanded","setVx","setVy","getVx","getVy","invertVx","invertVy","setDelay","eta","getBounds","isPrepareLaunchPos","setisPrepareLaunchPos","prepareLaunchPos","SPEED_FLY","SPEED_ARRANGEMENT","BonusPanel_1","Point_1","Sprite_1","getList","anyLanded","num_newBall","balls","DEFAULT_START_POS_X","DEFAULT_START_POS_Y","preLaunchPos","Point","addNewBall","DEFAULT_BALL_COUNT","visibleBall","length","prepareLaunch","BALL_FLYING","ballMove","push","nextX","nextY","rad","atan2","cos","sin","b","isPrepareLaunchPosision","abs","allisPreLaunchPos","speedEta","SCALE_KEY_PRESSED_SPEED","v","moveToPreLaunchPos","cnt","colideJudge","addScore","BLOCK_DOWN","breakCount","eightPoints","ballBounds","_i","blocks_1","blockBounds","BonusPanel","bonusPos","orAll","addDamage","checkHitBlock","location","NIL","onHitBlock","RIGHT","LEFT","TOP","BOTTOM","RIGHT_BOTTOM","LEFT_BOTTOM","RIGHT_TOP","LEFT_TOP","MOVE_VALUE_ON_HIT","Block_1","life","soundPlay","Block","drawHP","toString","font","FONT_SIZE","fillStyle","mea","measureText","fillText","waveCount","ballCount","score","countUpWave","leftTop","rightTop","leftBtm","rightBtm","rhs","a","bottom","right","src_img","blocks","blockDownSpeed","movedDist","NUM_BLOCK_COLOR","createElement","context","globalCompositeOperation","fillRect","cp","toDataURL","img_blocks","_b","NUM_BLOCK_VERTICAL","OFFSET_Y","MARGIN_Y","apply","createHorizontalBlockArray","calcNUM_VOID","BONUS_PROBABILITY","initDown","blockDown","VALUE_DOWN_SPEED_SLOW","DEFAULT_BLOCK_DOWN_SPEED","createHorizontalHideArray","NUM_VOID","random","num_void","bonusProbab","NUM_BLOCK_HORIZONTAL","is_void","voidPoslist","OFFSET_X","MARGIN_X","HP","OneUP","oparity","Y_MOVE_VALUE","OPACITY_SUBTRACT_VALUE","bonusPoses","que","point","WIDTH_DIFF","BOTTOM_Y_STRING_WAVE","BOTTOM_Y_STRING_BALL","BOTTOM_Y_STRING_SCORE","opacity","DEFAULT_OPACITY","img_y","FIRST_IMG_Y","DELAY","text_y","TEXT_Y","isText_y_up","textMove","END_IMG_Y","IMG_VY","FADE_IN_SPEED","drawMainMenu","drawGameOver","drawScore","MIN_TOP_TXET_Y","VAULE_TEXT_Y_ADD","MAX_BOTTOM_TEXT_Y","TEXT_MENU","save","globalAlpha","restore","__export"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/js\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 14);\n","import { CornerCollisionState } from \"./CornerCollisionState\";\nimport { EightPointsCollisionState } from \"./EightPointsCollisionState\";\n\nexport class RectBounds {\n\n    public static getCornerCollisionState(me: RectBounds, target: RectBounds) {\n        return new CornerCollisionState(\n                target.contains(me.ax, me.ay),\n                target.contains(me.bx, me.ay),\n                target.contains(me.ax, me.by),\n                target.contains(me.bx, me.by),\n        );\n    }\n\n    public static getEightPointsCollisionState(me: RectBounds, target: RectBounds) {\n        const centerX = Math.trunc((me.ax + me.bx) / 2);\n        const centerY = Math.trunc((me.ay + me.by) / 2);\n\n        return new EightPointsCollisionState(\n                target.contains(me.ax, me.ay),\n                target.contains(me.bx, me.ay),\n                target.contains(me.ax, me.by),\n                target.contains(me.bx, me.by),\n                target.contains(centerX, me.ay),   // top\n                target.contains(centerX, me.by),   // bottom\n                target.contains(me.ax, centerY),   // left\n                target.contains(me.by, centerY),    // right\n        );\n    }\n\n    public static whereCollisionAt(me: RectBounds, target: RectBounds) {\n        const corner\n                = RectBounds.getCornerCollisionState(me, target);\n        return corner.whereCollisionAt();\n    }\n    /**\n     * 左上の座標を(ax,ay), 右下の座標を(bx,by)とする矩形を生成します。<br>\n     * 右上と左下の座標位置関係を満たす必要があり, (ax < bx)かつ(ay < by)でなければなりません。\n     * @param ax 左上の x座標\n     * @param ay 左上の y座標\n     * @param bx 右下の x座標\n     * @param by 左下の y座標\n     * @throws IllegalArgumentException 右上・左下の位置関係が満たされない, すなわち(ax >= bx)または(ay >= by)となった時\n     */\n    constructor(private ax: number, private ay: number, private bx: number, private by: number) {\n        if (ax >= bx || ay >= by) {\n            throw new Error(\"IllegalArgument\");\n        }\n    }\n\n    // 自分の矩形と引数の矩形が衝突してるか\n    public collision(r: RectBounds) {\n        return ((this.ax < r.bx) && (r.ax < this.bx)\n                && (this.ay < r.by) && (r.ay < this.by));\n    }\n\n    // 矩形内に引数の座標が入るか\n    public contains(x: number, y: number) {\n        return ((x >= this.ax) && (y >= this.ay) && (x <= this.bx) && (y <= this.by));\n    }\n\n    // =================================================================================================================\n}\n\n // どこが衝突しているかの列挙体\nexport enum Location {\n     NIL, TOP, BOTTOM, LEFT, RIGHT,\n     RIGHT_TOP, RIGHT_BOTTOM, LEFT_TOP, LEFT_BOTTOM,\n }\n","export abstract class Sprite {\n\n    public static update(list: Sprite[]) {\n        try {\n            list.slice().forEach((s, index) => {\n                if (s.vanished) {\n                    list.splice(index, 1);\n                } else {\n                    s.update(1);\n                }\n            });\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    public static draw(list: Sprite[], g2d: CanvasRenderingContext2D) {\n            list.slice().forEach((s, index) => {\n                try {\n                    if (s.vanished) {\n                        list.splice(index, 1);\n                    } else if (s.visible) {\n                        s.draw(g2d);\n                    }\n                } catch (e) {\n                    console.error(e);\n                }\n            });\n    }\n    protected x = 0;\n    protected y = 0;\n    private vanished = false;\n    private visible = true;\n\n    public abstract update(eta: number): void;\n\n    public abstract draw(g2d: CanvasRenderingContext2D): void;\n\n    public isVanished() {\n        return this.vanished;\n    }\n    public vanish() {\n        this.vanished = true;\n        this.visible = false;\n    }\n\n    public isVisible() {\n        return this.visible;\n    }\n    public setVisible(visible: boolean) {\n        this.visible = visible;\n    }\n\n    public getX() {\n        return this.x;\n    }\n    public setX(x: number) {\n        this.x = x;\n    }\n    public addX(vx: number) {\n        return (this.x += vx);\n    }\n\n    public getY() {\n        return this.y;\n    }\n    public setY(y: number) {\n        this.y = y;\n    }\n    public addY(vy: number) {\n        return (this.y += vy);\n    }\n}\n","import { Ball } from \"./Ball\";\nimport { BallManager} from \"./BallManager\";\nimport { BlockManager} from \"./BlockManager\";\nimport { GameState, State} from \"./GameState\";\nimport { ScoreRenderer} from \"./ScoreRenderer\";\nimport { SessionRenderer} from \"./SessionRenderer\";\n\nexport class Game {\n    public static WIDTH   = 720;      // ウィンドウサイズ\n    public static HEIGHT  = 540;\n    public static FLOOR_Y = Game.HEIGHT - 30;  // 床の座標\n    public static STATUS_PANEL_X = 520;   // ステータスパネルの座標\n    public static img_ball: HTMLImageElement;\n    public static img_block: HTMLImageElement;\n    public static img_bonusPanel: HTMLImageElement;\n    public static img_hexagonBack: HTMLImageElement;\n    public static img_floor: HTMLImageElement;\n    public static img_glossPanel: HTMLImageElement;\n    public static img_gameover: HTMLImageElement;\n    public static img_logo: HTMLImageElement;\n    public static img_1up: HTMLImageElement;\n    public static img_cursor: HTMLImageElement;\n\n    public static main() {\n        const game = new Game();\n        (async () => {\n            game.run();\n        })();\n    }\n\n    private static RUNCHECK_INTERVAL = 120;\n    public static url_menuMP3?: HTMLAudioElement;\n    public static url_mainGameMP3?: HTMLAudioElement;\n    public static url_explosion?: HTMLAudioElement;\n    public static url_coin?: HTMLAudioElement;\n    // private static Cursor cursor_DEFAULT, cursor_MY_CROSS;\n    private static RESOURCE = \"resources/\";\n\n    // private final Component     screen;\n    private blockManager!: BlockManager;\n    private ballManager!: BallManager;\n    private scoreRenderer!: ScoreRenderer;\n    private sessionRenderer!: SessionRenderer;\n\n    private gameState: GameState;\n    private runChecker = Game.RUNCHECK_INTERVAL;\n\n    // private MP3Player mp3Menu, mp3mainGame;\n\n    private static checkImage(url: string) {\n        return new Promise((resolve) => {\n            const img = new Image();\n            img.onload = () => resolve(img);\n            img.src = url;\n        });\n    }\n\n    private initResources(): Promise<void> {    // 最初に一度だけ実行: 画像,音声読み込み\n        console.log(\"Game static init\");\n\n        return new Promise((resolve) => {\n                Promise.all([\n                  Game.RESOURCE + \"ball.png\",\n                  Game.RESOURCE + \"block-dark.png\",\n                  Game.RESOURCE + \"bonusPanel.png\",\n                  Game.RESOURCE + \"hexagon-back.jpeg\",\n                  Game.RESOURCE + \"floor.png\",\n                  Game.RESOURCE + \"gloss-panel.png\",\n                  Game.RESOURCE + \"gameover.jpg\",\n                  Game.RESOURCE + \"logo.jpeg\",\n                  Game.RESOURCE + \"1UP.png\",\n                  Game.RESOURCE + \"cursor.png\",\n                 ].map(Game.checkImage))\n            .then((r) => {\n                Game.img_ball = r.shift() as HTMLImageElement;\n                Game.img_block = r.shift() as HTMLImageElement;\n                Game.img_bonusPanel = r.shift() as HTMLImageElement;\n                Game.img_hexagonBack = r.shift() as HTMLImageElement;\n                Game.img_floor = r.shift() as HTMLImageElement;\n                Game.img_glossPanel = r.shift() as HTMLImageElement;\n                Game.img_gameover = r.shift() as HTMLImageElement;\n                Game.img_logo = r.shift() as HTMLImageElement;\n                Game.img_1up = r.shift() as HTMLImageElement;\n\n                // マウスカーソル\n                Game.img_cursor = r.shift() as HTMLImageElement;\n                resolve();\n            });\n        });\n        // url_menuMP3     = Game.class.getResource(RESOURCE + \"dance.MP3\");\n        // url_mainGameMP3 = Game.class.getResource(RESOURCE + \"digitalworld.MP3\");\n        // url_explosion   = Game.class.getResource(RESOURCE + \"explosion.MP3\");\n        // url_coin        = Game.class.getResource(RESOURCE + \"coin.MP3\");\n    }\n\n    private getTimestamp = () => 0;\n\n    // private Game(final BufferingRenderer renderer)\n    constructor() {\n        this.gameState = new GameState();\n    }\n\n    public async run() {\n        await this.initResources();\n        await this.runAfterResourcesLoaded();\n    }\n\n    private async runAfterResourcesLoaded() {\n        this.blockManager = new BlockManager(Game.img_block);\n        this.ballManager = new BallManager(Game.img_ball, () => {\n                return this.blockManager.getBlocks();\n            });\n        this.scoreRenderer = new ScoreRenderer();\n        this.sessionRenderer = new SessionRenderer();\n\n        const canvas = document.getElementById(\"gamecanvas\") as HTMLCanvasElement;\n        canvas.width = Game.WIDTH;\n        canvas.height = Game.HEIGHT;\n\n        // 初期のカーソル\n        canvas.style.cursor = \"url('\" + Game.img_cursor.src + \"'), auto\";\n\n        // マウスやキーのイベントリスナーの設定\n        this.eventListenInit(canvas);\n\n        if (window.performance.now) {\n            console.log(\"Using high performance timer\");\n            this.getTimestamp = () => window.performance.now();\n        } else {\n            if ((window.performance as any).webkitNow) {\n                console.log(\"Using webkit high performance timer\");\n                this.getTimestamp = () => (window.performance as any).webkitNow();\n            } else {\n                console.log(\"Using low performance timer\");\n                this.getTimestamp = () => new Date().getTime();\n            }\n        }\n\n        // engine\n        const g2d = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\n        await this.initialize();\n\n        const gameloop = () => {\n            this.update();\n            this.render(g2d);\n            requestAnimationFrame(gameloop);\n        };\n\n        requestAnimationFrame(gameloop);\n    }\n\n    public async initialize() {\n        this.gameState.init();\n        this.ballManager.init();\n        await this.blockManager.init();\n        this.scoreRenderer.init();\n        this.sessionRenderer.init();\n        console.log(\"Game#initialied()   state: \" + this.gameState.state);\n\n        // mp3Menu = new MP3Player(url_menuMP3, true); //タイトル画面の時のBGMをループ再生(別スレッド)\n    }\n\n    public update() {\n        this.gameState = this.ballManager.update(this.gameState);\n        this.gameState = this.blockManager.update(this.gameState);\n        this.gameState = this.scoreRenderer.update(this.gameState);\n\n        // スscoreRenderer(テータスパネル描画)のターン数やボール数,スコアを更新\n        this.scoreRenderer.setWaveCount(this.gameState.getWaveCount());\n        this.scoreRenderer.setBallCount(this.ballManager.getBallCount() );\n        this.scoreRenderer.setScore(this.gameState.getScore());\n        // gameStateのボール数を更新\n        this.gameState.setBallCount(this.ballManager.getBallCount());\n\n        this.sessionRenderer.update(this.gameState);\n\n        // もしGameOverでBGMがまだなっていたら止める\n        // if (this.gameState.state == State.GAMEOVER) { // && mp3mainGame != null) {\n        //      this.mp3mainGame.stop();\n        //      this.mp3mainGame = null;\n        // }\n\n        // デバック用\n        if (--this.runChecker < 0) {\n            this.runChecker = Game.RUNCHECK_INTERVAL;\n            console.log(\"[RUNNING] update()\" + \"\\tstate: \" + this.gameState.state);\n        }\n    }\n\n    public render(g2d: CanvasRenderingContext2D) {\n        g2d.drawImage(Game.img_hexagonBack, 0, 0);\n        this.ballManager.draw(g2d);\n        this.blockManager.draw(g2d);\n\n        g2d.drawImage(Game.img_floor, 0, Game.FLOOR_Y);\n        this.scoreRenderer.draw(g2d);\n\n        switch (this.gameState.state) {\n            case State.MAIN_MENU:\n            case State.GAMEOVER:\n            case State.RETURNABLE_TO_MENU:\n                this.sessionRenderer.draw(g2d, this.gameState);\n                break;\n        }\n\n        // デバック用\n//        if (--runChecker < 0) {\n//            runChecker = RUNCHECK_INTERVAL;\n//            System.out.println(\"[RUNNING] render()\");\n//        }\n    }\n\n    private eventListenInit(canvas: HTMLCanvasElement) {\n        canvas.addEventListener(\"mousedown\", (e: any) => {\n            e.preventDefault();\n\n            const rect = canvas.getBoundingClientRect();\n            const x = e.clientX - rect.left;\n            const y = e.clientY - rect.top;\n\n            // CLICK_WAITの時にマウスの左ボタンがクリックされたら gameState を変更\n            console.log(\"mouse: \" + x + \", \" + y + \"   state: \" + this.gameState.state);\n\n            switch (this.gameState.state) {\n                // タイトル画面でクリックされたらBGMを変更し,gameStateを変える\n                case State.MAIN_MENU:\n                    this.gameState.state = State.CLICK_WAIT;\n                    break;\n\n                // クリック待ち状態でクリックされた\n                case State.CLICK_WAIT:\n                    // ボタン,クリック位置の判定\n                    if ( y < Game.FLOOR_Y - (Ball.SIZE + 25)\n                            && x < Game.STATUS_PANEL_X) {\n                        this.gameState.state = State.NOW_CLICKED;\n                        this.gameState.mousePos.x = x;\n                        this.gameState.mousePos.y = y;\n                    }\n                    break;\n\n                // GameOverの後\n                case State.RETURNABLE_TO_MENU:\n                    this.gameState.state = State.MAIN_MENU;\n                    this.initialize();\n                    break;\n            }\n        });\n\n        document.addEventListener(\"keyup\", (e) => {\n            const key = e.key || e.keyCode;\n            if (e.keyCode == 32) {\n                if (this.gameState.state != State.CLICK_WAIT) {\n                    this.gameState.keyPressed_space = true;\n                }\n            } else if (key == \"Shift\") {\n                // 初期のカーソル\n                if ((canvas.style.cursor || \"\").includes(\"url\")) {\n                    canvas.style.cursor = \"\";\n                } else {\n                    canvas.style.cursor = \"url('\" + Game.img_cursor.src + \"'), auto\";\n                }\n            }\n        });\n    }\n\n    // private void eventListenInit(final Component screen)\n    // {\n    //     this.screen.addMouseListener(new MouseAdapter()\n    //     {\n    //         @Override\n    //         public void mouseClicked(MouseEvent ev)\n    //         {\n    //             // CLICK_WAITの時にマウスの左ボタンがクリックされたら gameState を変更\n    //             System.out.println(\"mouse: \" + ev.getX() + \", \" + ev.getY() + \"   state: \" + gameState);\n    //             Game.this.screen.requestFocus();\n\n    //             switch (gameState.state) {\n    //                 // タイトル画面でクリックされたらBGMを変更し,gameStateを変える\n    //                 case MAIN_MENU:\n    //                     gameState.state = GameState.State.CLICK_WAIT;\n    //                     if (mp3Menu != null) {\n    //                         mp3Menu.stop();\n    //                     }\n    //                     mp3mainGame = new MP3Player(url_mainGameMP3, true);\n    //                     break;\n    //                 // クリック待ち状態でクリックされた\n    //                 case CLICK_WAIT:\n    //                     //ボタン,クリック位置の判定\n    //                     if ( (ev.getButton() == MouseEvent.BUTTON1)\n    //                             && ev.getY() < FLOOR_Y - (Ball.SIZE + 25)\n    //                             && ev.getX() < STATUS_PANEL_X)\n    //                     {\n    //                         gameState.state = GameState.State.NOW_CLICKED;\n    //                         gameState.mousePos.x = ev.getX();\n    //                         gameState.mousePos.y = ev.getY();\n    //                     }\n    //                     break;\n\n    //                 // GameOverの後\n    //                 case RETURNABLE_TO_MENU:\n    //                     gameState.state = GameState.State.MAIN_MENU;\n    //                     initialize();\n    //                     break;\n    //             }\n    //         }\n    //     });\n\n    //     // スペースキーが押されたか\n    //     this.screen.addKeyListener(new KeyAdapter()\n    //     {\n    //         @Override\n    //         public void keyPressed(KeyEvent ev)\n    //         {\n    //             switch (ev.getKeyCode()) {\n    //                 case KeyEvent.VK_SPACE:\n    //                     if (gameState.state != GameState.State.CLICK_WAIT) {\n    //                         gameState.keyPressed_space = true;\n    //                     }\n    //                     break;\n    //             }\n    //         }\n\n    //         @Override\n    //         public void keyReleased(KeyEvent ev)\n    //         {\n    //             switch (ev.getKeyCode()) {\n    //                 case KeyEvent.VK_SPACE:\n    //                     gameState.keyPressed_space = false;\n    //                     break;\n    //                 case KeyEvent.VK_SHIFT: //シフトキーが押されたらマウスカーソルの画像をトグル\n    //                     if (screen.getCursor().equals(cursor_DEFAULT)) {\n    //                         screen.setCursor(cursor_MY_CROSS);\n    //                     } else {\n    //                         screen.setCursor(cursor_DEFAULT);\n    //                     }\n    //             }\n    //         }\n    //     });\n    // }\n}\n","import { Game } from \"./Game\";\nimport { RectBounds } from \"./RectBounds\";\nimport { Sprite } from \"./Sprite\";\n\nexport class Ball extends Sprite {\n    public static SIZE = 16; // ボールの大きさ(縦,横同じサイズ)\n    public static SPEED_FLY = 6.2; // 飛ぶ時の速さ\n    public static SPEED_ARRANGEMENT = 5; // 発射場所へ戻る速さ\n\n    private img: HTMLImageElement;\n    private vx = 0;\n    private vy = 0;  // speed\n    private delay = 0; // クリックされてから発射するまでの時間\n    private _isPrepareLaunchPos = false; // 発射位置についたか\n    private landed = false; // 地面についたか\n\n    constructor(img: HTMLImageElement, x: number, y: number) {\n        super();\n        this.img = img;\n        this.x = x;\n        this.y = y;\n        this.delay = 0;\n        this.landed = true;\n    }\n\n    public isLanded() {\n        return this.landed;\n    }\n\n    public setLanded(landed: boolean) {\n        this.landed = landed;\n    }\n\n    public setVx(vx: number) {\n        this.vx = vx;\n    }\n\n    public setVy(vy: number) {\n        this.vy = vy;\n    }\n\n    public getVx() {\n        return this.vx;\n    }\n\n    public getVy() {\n        return this.vy;\n    }\n\n    public invertVx() {\n        this.vx = -this.vx;\n    }\n\n    public invertVy() {\n        this.vy = -this.vy;\n    }\n\n    public setDelay(delay: number) {\n        this.delay = delay;\n    }\n\n    public update(eta: number) {\n        if (this.delay > 0) {\n            this.delay--;\n            return ;\n        }\n\n        this.x += this.vx * eta;\n        this.y += this.vy * eta;\n\n        // 飛んでいる場合はhogehoge処理\n        if (!this.landed) {\n            // 画面の縁に触れたなら向きを反転\n            if ((this.x < 0)) {\n                this.vx = -this.vx;\n                this.x = 1;\n            } else if (this.x + Ball.SIZE > Game.STATUS_PANEL_X) {\n                this.vx = -this.vx;\n                this.x = Game.STATUS_PANEL_X - Ball.SIZE - 1; // めり込まないように強制的に移動\n            }\n            if (this.y < 0) {\n                this.vy = -this.vy;\n                this.y = 1; // めり込まないように強制的に移動\n            }\n\n            // 地面についたらフラグを立てる\n            if (Math.trunc(this.y + Ball.SIZE + 1) > Game.FLOOR_Y) {\n                this.landed = true;\n            }\n        }\n\n    }\n\n    public getBounds() {\n        return (new RectBounds(this.x, this.y, this.x + Ball.SIZE, this.y + Ball.SIZE));\n    }\n\n    public draw(g2d: CanvasRenderingContext2D) {\n        g2d.drawImage(this.img, Math.trunc(this.x), Math.trunc(this.y));\n    }\n\n    public isPrepareLaunchPos() {\n        return this._isPrepareLaunchPos;\n    }\n\n    public setisPrepareLaunchPos(prepareLaunchPos: boolean) {\n        this._isPrepareLaunchPos = prepareLaunchPos;\n    }\n}\n","import { Ball } from \"./Ball\";\nimport { Block } from \"./Block\";\nimport { BonusPanel } from \"./BonusPanel\";\nimport { EightPointsCollisionState } from \"./EightPointsCollisionState\";\nimport { Game } from \"./Game\";\nimport { GameState, State } from \"./GameState\";\nimport { Point } from \"./Point\";\nimport { Location, RectBounds } from \"./RectBounds\";\nimport { Sprite } from \"./Sprite\";\n\nexport class BallManager {\n    public static  DEFAULT_BALL_COUNT = 3;     // ボールの数の初期値\n    private static DEFAULT_START_POS_X = 0;    // 初期の発射位置\n    private static DEFAULT_START_POS_Y = 0;\n    private static SCALE_KEY_PRESSED_SPEED = 1.6;  // スペースキーが押された時に何倍速にするか\n    private static MOVE_VALUE_ON_HIT = 3;\n    // static\n    private img_ball: HTMLImageElement;\n\n    private balls: Ball[];\n\n    private preLaunchPos: Point; // 次の発射位置\n    private anyLanded = false;  // ボールが1つでも着地したらtrue\n    private getBlocks: () => Block[]; // 当たり判定するblockのリスト\n    private num_newBall = 0;    // ターン終了時にリストに追加するボールの数\n    private visibleBall?: Ball;\n\n    constructor(src: HTMLImageElement, getList: () => Block[]) {\n        this.img_ball = src;\n        this.getBlocks = getList;\n        this.balls = [];\n\n        if (!BallManager.DEFAULT_START_POS_X &&\n            !BallManager.DEFAULT_START_POS_Y) {\n            BallManager.DEFAULT_START_POS_X = Math.trunc(Game.STATUS_PANEL_X / 2);\n            BallManager.DEFAULT_START_POS_Y = Game.FLOOR_Y - Ball.SIZE;\n        }\n\n        this.preLaunchPos = new Point(BallManager.DEFAULT_START_POS_X, BallManager.DEFAULT_START_POS_Y);\n    }\n\n    public init() {\n        // ボール配列を初期化\n        this.balls = [];\n        this.num_newBall = 0;\n        // 初期発射位置\n        this.preLaunchPos.x = BallManager.DEFAULT_START_POS_X;\n        this.preLaunchPos.y = BallManager.DEFAULT_START_POS_Y;\n        // リストにボールを追加\n        this.addNewBall(BallManager.DEFAULT_BALL_COUNT);\n        this.visibleBall = this.balls[0];\n        console.log(\"init() BallManager\");\n    }\n\n    public getBallCount() {\n        return this.balls.length + this.num_newBall;\n    }\n\n    public draw(g2d: CanvasRenderingContext2D) {\n        if (this.visibleBall) {\n            this.visibleBall.draw(g2d);\n        }\n        Sprite.draw(this.balls, g2d);\n    }\n\n    public update(gameState: GameState) {\n        switch (gameState.state) {\n            case State.NOW_CLICKED:\n                this.prepareLaunch(gameState); // ボールの発射準備(向きの設定等)\n                gameState.state = State.BALL_FLYING;\n                break;\n            case State.BALL_FLYING:\n                gameState =  this.ballMove(gameState);\n                break;\n        }\n        return gameState;\n    }\n\n    // =========================================================================================================\n    private addNewBall(n: number) {\n        for (let i = 0; i < n; ++i) {\n            this.balls.push(new Ball(this.img_ball, this.preLaunchPos.x, this.preLaunchPos.y));\n        }\n    }\n\n    private prepareLaunch(gameState: GameState) {\n        console.log(\"prepareLaunch\");\n        this.anyLanded = false;\n        /*マウスに向けて飛ぶように速度(向き)を算出 */\n        // ボールの左上の座標\n        const nextX = gameState.mousePos.x - Ball.SIZE / 2;\n        const nextY = gameState.mousePos.y - Ball.SIZE / 2;\n\n        // 角度計算\n        const rad = Math.atan2(nextY - this.preLaunchPos.y,\n                nextX - this.preLaunchPos.x);\n\n        // x方向の速度\n        const vx = Ball.SPEED_FLY * Math.cos(rad);\n        // y方向の速度\n        const vy = Ball.SPEED_FLY * Math.sin(rad);\n\n        this.balls.forEach((b, i) => {\n            b.setDelay(i * 8);\n            b.setLanded(false);\n            b.setVisible(true);\n            // 速度設定\n            b.setVx(vx);\n            b.setVy(vy);\n            b.setisPrepareLaunchPos(false);\n        });\n    }\n\n    // ボールが発射位置についているか\n    private isPrepareLaunchPosision(b: Ball) {\n        const xdiff = Math.abs(Math.trunc(b.getX()) - this.preLaunchPos.x); // x方向のズレの距離\n        if (xdiff <= Ball.SPEED_ARRANGEMENT) {\n            b.setX(this.preLaunchPos.x); // 距離が近いなら強制的に移動\n        }\n        return Math.trunc(b.getX()) == this.preLaunchPos.x && Math.trunc(b.getY()) == this.preLaunchPos.y;\n    }\n\n    private ballMove(gameState: GameState) {\n        let allisPreLaunchPos = true;\n        const speedEta = gameState.keyPressed_space ? BallManager.SCALE_KEY_PRESSED_SPEED : 1.0;\n\n        this.balls.forEach((v) => {\n            if (v.isLanded()) {\n                if (!this.anyLanded) { // まだ誰も着地していない時\n                    this.anyLanded = true;\n                    this.visibleBall = v; // 地面に最初についたボールをvisibleBallにする\n                    this.preLaunchPos.x = Math.trunc(v.getX());\n                    this.preLaunchPos.y = Game.FLOOR_Y - Ball.SIZE;\n                }\n                v.setVy(0);\n                v.setY(this.preLaunchPos.y);\n                this.moveToPreLaunchPos(v);\n            } else {\n                const cnt = this.colideJudge(v, gameState);\n                gameState.addScore(cnt * 100);\n            }\n            allisPreLaunchPos = allisPreLaunchPos && v.isPrepareLaunchPos();\n            v.update(speedEta);\n        });\n\n        // すべてのボールが発射位置についたか\n        if (allisPreLaunchPos) {\n            console.log(\"all is PreLaunchPos.\");\n            gameState.state = State.BLOCK_DOWN;\n            this.addNewBall(this.num_newBall);\n            this.num_newBall = 0;\n        }\n\n        return gameState;\n    }\n\n    private moveToPreLaunchPos(v: Ball) {\n        if (this.isPrepareLaunchPosision(v)) {\n            v.setVx(0); // 止める\n            v.setisPrepareLaunchPos(true);\n            v.setVisible(false);\n        } else {\n            if (Math.trunc(v.getX()) < this.preLaunchPos.x) { // 定位置よりも左にある\n                v.setVx(Ball.SPEED_ARRANGEMENT);\n            } else {\n                v.setVx(-(Ball.SPEED_ARRANGEMENT));\n            }\n        }\n    }\n\n    // 壊したブロックの数を返す\n    private colideJudge(v: Ball, gameState: GameState) {\n        // 壊した数(スター:+2,  ブロック:+1)\n        let breakCount = 0;\n\n        const eightPoints = new EightPointsCollisionState();\n        const ballBounds = v.getBounds();\n        const blocks = this.getBlocks();\n\n        for (const b of blocks) {\n            // block の当たり判定矩形を取得\n            const blockBounds = b.getBounds();\n\n            if (ballBounds.collision(blockBounds)) { // 触れた時\n                if (b instanceof BonusPanel) { // スターパネルか?\n                    this.num_newBall++;\n                    b.vanish();\n                    breakCount += 2;\n                    gameState.bonusPos.push(new Point(Math.trunc(b.getX()), Math.trunc(b.getY()))); // 1UP表示のQueue\n                } else {\n                    eightPoints.orAll(RectBounds.getEightPointsCollisionState(ballBounds, blockBounds));\n                    if (b.addDamage()) { // もし破壊したら\n                        breakCount++;\n                    }\n                }\n            }\n        }\n        // ボールの反射方向を計算,設定\n        this.checkHitBlock(v, eightPoints);\n        return breakCount;\n    }\n\n    private checkHitBlock(v: Ball, eightPoints: EightPointsCollisionState) {\n        const location\n                = eightPoints.whereCollisionAt();\n        if (location != Location.NIL) {\n            this.onHitBlock(v, location);\n        }\n    }\n\n    private onHitBlock(v: Ball, location: Location) {\n        switch (location) {\n            case Location.RIGHT:\n            case Location.LEFT:\n                v.invertVx();\n                break;\n            case Location.TOP:\n            case Location.BOTTOM:\n                v.invertVy();\n                break;\n\n            case Location.RIGHT_BOTTOM:  // 右下が当たったので左へ向ける,上下の方向は反転\n                if (v.getVx() > 0) { v.invertVx(); }\n                v.setVy(-1 * Math.abs(v.getVy()));\n                break;\n            case Location.LEFT_BOTTOM:\n                if (v.getVx() < 0) { v.invertVx(); }\n                v.setVy(-1 * Math.abs(v.getVy()));\n                break;\n\n            case Location.RIGHT_TOP:\n                if (v.getVx() > 0) { v.invertVx(); }\n                v.setVy(Math.abs(v.getVy()));\n                break;\n            case Location.LEFT_TOP:\n                if (v.getVx() < 0) { v.invertVx(); }\n                v.setVy(Math.abs(v.getVy()));\n                break;\n        }\n        // ボールが貫通しないように余分に移動させる\n        v.update(1);\n    }\n\n}\n","import { Block } from \"./Block\";\nimport { RectBounds } from \"./RectBounds\";\n\nexport class BonusPanel extends Block {\n    // スーパークラスのフィールドを隠蔽\n    public static WIDTH = 40;\n\n    constructor(img: HTMLImageElement, x: number, y: number, life: number) {\n        super(img, x, y, life);\n    }\n\n    public soundPlay() {\n        // new MP3Player(Game.url_coin, false);\n    }\n\n    public getBounds() {\n        return new RectBounds(this.x, this.y, this.x + BonusPanel.WIDTH, this.y + BonusPanel.HEIGHT);\n    }\n\n    public draw(g2d: CanvasRenderingContext2D) {\n        // g2d.drawImage(this.img, (int)this.x, (int)this.y, null);\n        g2d.drawImage(this.img, Math.trunc(this.x), Math.trunc(this.y));\n    }\n}\n","import { RectBounds } from \"./RectBounds\";\nimport { Sprite } from \"./Sprite\";\n\nexport class Block extends Sprite {\n    public static WIDTH = 70;\n    public static HEIGHT = 36;\n    public static FONT_SIZE = 20;\n    protected img: HTMLImageElement;\n\n    private life: number;\n\n    constructor(img: HTMLImageElement, x: number, y: number, life: number) {\n        super();\n        this.img = img;\n        this.x = x;\n        this.y = y;\n        this.life = life;\n    }\n\n    // 当たり判定矩形を返す\n    public getBounds() {\n        return (new RectBounds(this.x - 1, this.y - 1, this.x + Block.WIDTH + 1, this.y + Block.HEIGHT + 1));\n    }\n\n    // 死んだらtrueを返す\n    public addDamage() {\n        this.life--;\n        if (this.life <= 0) {\n            this.vanish();\n            return true;\n        }\n\n        return false;\n    }\n\n    // 音を鳴らす(現在は鳴らさない仕様)\n    // tslint:disable-next-line:no-empty\n    public soundPlay() { }\n\n    public vanish() {\n        super.vanish();\n        this.soundPlay();\n    }\n\n    public update(eta: number) {\n    }\n\n    public draw(g2d: CanvasRenderingContext2D) {\n        // g2d.drawImage(img, (int)x, (int)y, null);\n        g2d.drawImage(this.img, Math.trunc(this.x), Math.trunc(this.y));\n        this.drawHP(g2d);\n    }\n\n    private drawHP(g2d: CanvasRenderingContext2D) {\n        const s = this.life.toString();\n        g2d.font = \"bold \" + Block.FONT_SIZE + \"px sans-serif\";\n        g2d.fillStyle = \"lightgray\";\n\n        // 文字列を中心に描画する\n        const mea = g2d.measureText(s);\n        // g2d.globalCompositeOperation = \"destination-out\";\n        g2d.fillText(s, (this.x + Block.WIDTH / 2) - (mea.width / 2),\n                         this.y + 2 * Block.HEIGHT / 3);\n        // g2d.globalCompositeOperation = \"source-over\";\n    }\n}\n","import { BallManager } from \"./BallManager\";\nimport { Point } from \"./Point\";\n\n// ゲームの状態\nexport enum State {\n     MAIN_MENU,\n     CLICK_WAIT,\n     NOW_CLICKED,\n     BALL_FLYING,\n     BLOCK_DOWN,\n     GAMEOVER,\n     RETURNABLE_TO_MENU,\n }\n\nexport class GameState {\n    public state = State.MAIN_MENU;\n    public mousePos = new Point(); // クリックされた位置\n    public keyPressed_space = false; // スペースキーが押されていればtrue\n    public bonusPos: Point[] = [];\n\n    private waveCount = 0; // ターン数\n    private ballCount = 0; // ボールの数\n    private score = 0;     // スコア\n\n    public init() {\n        this.state = State.MAIN_MENU;\n        this.keyPressed_space = false;\n        this.waveCount = 1;\n        this.ballCount = BallManager.DEFAULT_BALL_COUNT;\n        this.score = 0;\n        this.bonusPos = [];\n    }\n\n    public countUpWave() {\n        this.waveCount++;\n    }\n    public getWaveCount() {\n        return this.waveCount;\n    }\n    public getBallCount() {\n        return this.ballCount;\n    }\n    public setBallCount(n: number) {\n        this.ballCount = n;\n    }\n\n    public getScore() {\n        return this.score;\n    }\n    public addScore(n: number) {\n        this.score += n;\n    }\n\n    public toString() {\n        return this.state.toString() + \" / \" + this.mousePos.toString();\n    }\n}\n","import { Location } from \"./RectBounds\";\n\nexport class CornerCollisionState {\n   constructor(\n        public leftTop = false,\n        public rightTop = false,\n        public leftBtm = false,\n        public rightBtm = false) {}\n\n    public toString() {\n        return (\"LT: \" + this.leftTop + \" RT: \" + this.rightTop + \" LB: \" + this.leftBtm + \" RB: \" + this.rightBtm );\n    }\n\n    // 引数のフィールドとORをとる\n    public orAll(rhs: CornerCollisionState) {\n        this.leftTop    = this.leftTop || rhs.leftTop;\n        this.rightTop   = this.rightTop || rhs.rightTop;\n        this.leftBtm    = this.leftBtm || rhs.leftBtm;\n        this.rightBtm   = this.rightBtm || rhs.rightBtm;\n    }\n\n    // 4隅の衝突状態によってどこが衝突しているかを返す\n    public whereCollisionAt() {\n        if (this.leftTop && this.rightTop) {  // 左上と右上がブロック内\n            return Location.TOP;\n        } else if (this.leftBtm && this.rightBtm) {  // 左下と右下がブロック内\n            return Location.BOTTOM;\n        } else if (this.leftTop && this.leftBtm) {   // 左上と左下がブロック内\n            return Location.LEFT;\n        } else if (this.rightTop && this.rightBtm) { // 右上と右下がブロック内\n            return Location.RIGHT;\n        } else if (this.leftTop) {  // 左上\n            return Location.LEFT_TOP;\n        } else if (this.rightTop) { // 右上\n            return Location.RIGHT_TOP;\n        } else if (this.leftBtm) {  // 左下\n            return Location.LEFT_BOTTOM;\n        } else if (this.rightBtm) { // 右下\n            return Location.RIGHT_BOTTOM;\n        } else {\n            return Location.NIL;\n        }\n    }\n}\n","import { CornerCollisionState } from \"./CornerCollisionState\";\nimport { Location } from \"./RectBounds\";\n\nexport class EightPointsCollisionState extends CornerCollisionState {\n    public top = false;\n    public bottom = false;\n    public left = false;\n    public right = false;\n\n    constructor(\n        a = false, b = false, c = false, d = false,\n        top = false, bottom = false, left = false, right = false) {\n        super(a, b, c, d);\n        this.top = top;\n        this.bottom = bottom;\n        this.left = left;\n        this.right = right;\n    }\n\n    public orAll(rhs: EightPointsCollisionState) {\n        super.orAll(rhs);\n        this.top    = this.top || rhs.top;\n        this.bottom = this.bottom || rhs.bottom;\n        this.left   = this.left || rhs.left;\n        this.right  = this.right || rhs.right;\n    }\n\n    public whereCollisionAt() {\n        let location\n                = super.whereCollisionAt();\n\n        switch (location) {\n            case Location.LEFT_BOTTOM:\n                if (!(this.left && this.bottom)) {\n                    if (this.left) { location = Location.LEFT; } else if (this.bottom) { location = Location.BOTTOM; }\n                }\n                break;\n\n            case Location.RIGHT_BOTTOM:\n                if (!(this.right && this.bottom)) {\n                    if (this.right) { location = Location.RIGHT; } else if (this.bottom) { location = Location.BOTTOM; }\n                }\n                break;\n\n            case Location.LEFT_TOP:\n                if (!(this.left && this.top)) {\n                    if (this.left) { location = Location.LEFT; } else if (this.top) { location = Location.TOP; }\n                }\n                break;\n\n            case Location.RIGHT_TOP:\n                if (!(this.right && this.top)) {\n                    if (this.right) { location = Location.RIGHT; } else if (this.top) { location = Location.TOP; }\n                }\n                break;\n        }\n        return (location);\n    }\n}\n","export class Point {\n    constructor(public x = 0, public y = 0) {\n    }\n}\n","import { BallManager } from \"./BallManager\";\nimport { Block } from \"./Block\";\nimport { BonusPanel } from \"./BonusPanel\";\nimport { Game } from \"./Game\";\nimport { GameState, State } from \"./GameState\";\nimport { Sprite } from \"./Sprite\";\n\nexport class BlockManager {\n    private static NUM_BLOCK_COLOR = 4;   // ブロックの色の種類\n    private static MARGIN_X = 1;          // ブロックの周りの空間\n    private static MARGIN_Y = 1;          // 下の空間の幅\n    private static OFFSET_X = 40;         // ブロックのオフセット\n    private static OFFSET_Y = 0;\n    private static NUM_BLOCK_HORIZONTAL = 6;  // 横一行のブロック数\n    private static NUM_BLOCK_VERTICAL = 5;    // 縦一列のブロック数\n    private static DEFAULT_BLOCK_DOWN_SPEED = 4.2; // ブロックが降りてくる初期のスピード\n    private static VALUE_DOWN_SPEED_SLOW = 0.22; // 降りるスピードの減速定数\n    private static BONUS_PROBABILITY = 70;    // スターが1行の中に出る確率\n    private static NUM_VOID = 3;          // 空白の数\n\n    private static img_blocks: HTMLImageElement[] = [];\n    private blocks: Block[] = [];\n\n    private blockDownSpeed = 0.0;\n    private delay = 0;\n    private movedDist = 0.0;\n\n    constructor(private src_img: HTMLImageElement) {\n    }\n\n    private initResources(): Promise<void> {\n        return new Promise((resolve) => {\n            for (let i = 0; i < BlockManager.NUM_BLOCK_COLOR; i++) {\n                const canvas = document.createElement(\"canvas\");\n                canvas.width = Block.WIDTH;\n                canvas.height = Block.HEIGHT;\n                const context = canvas.getContext(\"2d\")!;\n                context.drawImage(this.src_img, 0, 0);\n\n                // カラフルなブロックの生成\n                context.globalCompositeOperation = \"overlay\";\n                if (i == 0) { context.fillStyle = \"rgb(180, 0, 0)\"; }\n                else if (i == 1) { context.fillStyle = \"rgb(0, 180, 0)\"; }\n                else if (i == 2) { context.fillStyle = \"rgb(0, 0, 220)\"; }\n                else if (i == 3) { context.fillStyle = \"rgb(150, 150, -20)\"; }\n                context.fillRect(0, 0, Block.WIDTH, Block.HEIGHT);\n                const cp = new Image();\n                cp.src = canvas.toDataURL();\n                BlockManager.img_blocks.push(cp);\n\n                resolve();\n            }\n        });\n    }\n\n    public async init() {\n        if (!BlockManager.img_blocks.length) {\n            await this.initResources();\n        }\n\n        this.blocks = [];\n\n        for (let i = 0; i < BlockManager.NUM_BLOCK_VERTICAL; ++i) {\n            const y = BlockManager.OFFSET_Y + i * (Block.HEIGHT + BlockManager.MARGIN_Y);\n            this.blocks.push(...this.createHorizontalBlockArray(\n                    y,\n                    this.calcNUM_VOID(),\n                    BlockManager.BONUS_PROBABILITY + 20,\n                    BallManager.DEFAULT_BALL_COUNT));\n        }\n\n        // 上部の見えない部分のブロックを生成, フィールド初期化\n        this.initDown(BallManager.DEFAULT_BALL_COUNT);\n        console.log(\"init() BlockManager : num_blocks_count = \" + this.blocks.length);\n    }\n\n    public update(gameState: GameState) {\n        // BLOCK_DOWNの時のみ処理\n        switch (gameState.state) {\n            case State.BLOCK_DOWN:\n                gameState = this.blockDown(gameState);\n        }\n        return gameState;\n    }\n\n    public draw(g2d: CanvasRenderingContext2D) {\n        Sprite.draw(this.blocks, g2d);\n    }\n\n    public getBlocks(): Block[] {\n        return this.blocks;\n    }\n\n    private blockDown(gameState: GameState) {\n        if (this.delay > 0) {\n            this.delay--;\n        } else if (Math.trunc(this.movedDist) >= Block.HEIGHT + BlockManager.MARGIN_Y) {\n            // 次のblockDown() に向けて初期化\n            this.initDown(gameState.getBallCount());\n            // gamestate更新\n            gameState.state = State.CLICK_WAIT;\n            gameState.countUpWave();\n            gameState.addScore( (gameState.getWaveCount() % 10  == 0) ?\n                    300 : (gameState.getWaveCount() % 5 == 0) ?\n                    100 : 50);\n        } else {  // まだスピードがあるならすべてのブロックに対しY座標を更新\n            this.blocks.forEach((e) => {\n                e.addY(this.blockDownSpeed);\n                // 床に触れたらゲームオーバー\n                if (!(e instanceof BonusPanel) && e.getY() + Block.HEIGHT > Game.FLOOR_Y) {\n                    gameState.state = State.GAMEOVER;\n                    // new MP3Player(Game.url_explosion, false);\n                    return gameState;\n                }\n            });\n            this.movedDist += this.blockDownSpeed; // ブロックの下がった距離に加算\n            this.blockDownSpeed -= BlockManager.VALUE_DOWN_SPEED_SLOW;\n            // もしスピードが0未満になったら\n            if (this.blockDownSpeed < 0) { this.blockDownSpeed = 0.25; }\n        }\n        return gameState;\n    }\n\n    private initDown(ballCount: number) {\n        this.blockDownSpeed = BlockManager.DEFAULT_BLOCK_DOWN_SPEED;\n        this.delay = 15;\n        this.movedDist = 0;\n        this.blocks.push(...this.createHorizontalHideArray(this.calcNUM_VOID(), ballCount));\n    }\n\n    // 空白のブロックの数\n    private calcNUM_VOID() {\n        if (this.blocks.length < 11) {\n            return BlockManager.NUM_VOID - 1;\n        } else if (Math.trunc(Math.random() * 10) < 2) {\n            return BlockManager.NUM_VOID + 1;\n        } else {\n            return BlockManager.NUM_VOID;\n        }\n    }\n\n    // 上部の目に見えないところのブロックを生成\n    private createHorizontalHideArray(num_void: number, ballCount: number) {\n        return this.createHorizontalBlockArray(-1 * (Block.HEIGHT + BlockManager.MARGIN_Y) , this.calcNUM_VOID(), BlockManager.BONUS_PROBABILITY, ballCount);\n    }\n\n    private createHorizontalBlockArray(y: number, num_void: number, bonusProbab: number, ballCount: number) {\n        if (num_void > BlockManager.NUM_BLOCK_HORIZONTAL) {\n            throw new Error('IllegalArgumentException(\"num_void is larger than NUM_BLOCK_HORIZONTAL\")');\n        }\n\n        // return用のブロックリスト\n        const list = [];\n        const is_void: boolean[] = [];\n        let bonusPos = -1; // スターの位置(左から何番目の配列か)\n\n        {\n            const voidPoslist: number[] = [];\n            let r: number;\n            // 空にする場所を決める\n            for (let i = 0; i < num_void; ++i) {\n                do {\n                    r = Math.trunc(Math.random() * BlockManager.NUM_BLOCK_HORIZONTAL);\n                } while (is_void[r] == true);\n                is_void[r] = true;\n                voidPoslist.push(r);\n            }\n            // ボーナスパネルを置くか,　置くならどこの場所に置くかを決める\n            if (Math.trunc(Math.random() * 100) < bonusProbab) {\n                bonusPos = voidPoslist[Math.trunc(Math.random() * voidPoslist.length)];\n            }\n        }\n        for (let i = 0; i < BlockManager.NUM_BLOCK_HORIZONTAL; ++i) {\n            if (is_void[i]) {\n                if (i == bonusPos) {    // 空白で,bonusPosならスターパネルを入れる\n                    const x = Math.trunc(BlockManager.OFFSET_X + i * (Block.WIDTH + BlockManager.MARGIN_X) + (Block.WIDTH - BonusPanel.WIDTH) / 2);\n                    list.push(new BonusPanel(Game.img_bonusPanel, x, y, 1));\n                }\n            } else {\n                const x = BlockManager.OFFSET_X + i * (Block.WIDTH + BlockManager.MARGIN_X);\n                const HP = 1 + ballCount + Math.trunc(Math.random() * ballCount);\n                list.push(new Block(BlockManager.img_blocks[Math.trunc(Math.random() * BlockManager.NUM_BLOCK_COLOR)], x, y, HP));\n            }\n        }\n\n        return list;\n    }\n}\n","import { Ball } from \"./Ball\";\nimport { Block } from \"./Block\";\nimport { BonusPanel } from \"./BonusPanel\";\nimport { Game } from \"./Game\";\nimport { GameState } from \"./GameState\";\nimport { Sprite } from \"./Sprite\";\n\nclass OneUP extends Sprite {\n    private static OPACITY_SUBTRACT_VALUE = 0.03; // 1フレーム毎に透明化する値\n    private static Y_MOVE_VALUE        = 0.4; // 上へ移動させる値(=vy)\n    private img: HTMLImageElement;\n    private oparity = 1; // 不透明度\n\n    constructor(img: HTMLImageElement, x: number, y: number) {\n        super();\n        this.img = img;\n        this.x = x;\n        this.y = y;\n        this.oparity = 1;\n    }\n\n    public update(eta: number) {\n        this.y -= OneUP.Y_MOVE_VALUE;\n        this.oparity -= OneUP.OPACITY_SUBTRACT_VALUE;\n        if (this.oparity <= 0) {\n            this.vanish();\n        }\n    }\n\n    public draw(g2d: CanvasRenderingContext2D) {\n        // Composite defaultComposite = g2d.getComposite();\n        // AlphaComposite composite\n        //         = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, (float)this.oparity);\n\n        // g2d.setComposite(composite);\n        g2d.drawImage(this.img, Math.trunc(this.x), Math.trunc(this.y));\n\n        // g2d.setComposite(defaultComposite);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ScoreRenderer {\n\n    private static WIDTH_DIFF = Block.WIDTH - BonusPanel.WIDTH;\n    private static WIDTH = 0;\n    private static HEIGHT = 0;\n    private static BOTTOM_Y_STRING_WAVE = 30;\n    private static BOTTOM_Y_STRING_BALL = 160;\n    private static BOTTOM_Y_STRING_SCORE = 290;\n\n    private ballCount = 0;\n    private waveCount = 1;\n    private score = 0;\n    private bonusPoses: OneUP[] = [];\n\n    constructor() {\n        this.init();\n        ScoreRenderer.WIDTH = (Game.WIDTH - Game.STATUS_PANEL_X) + 10; // ステータスパネルの幅\n        ScoreRenderer.HEIGHT = Game.HEIGHT + 40; // \"WAVE\"の文字列の下の座標\n    }\n\n    public init() {\n        this.ballCount = 0;\n        this.waveCount = 1;\n        this.score = 0;\n        this.bonusPoses = [];\n        console.log(\"init() ScoreRenderer\");\n    }\n\n    public update(gameState: GameState) {\n        Sprite.update(this.bonusPoses);\n\n        const que = gameState.bonusPos;\n        while (que.length) {\n            const point = que.shift();\n            if (point) {\n                this.bonusPoses.push(new OneUP(\n                        Game.img_1up,\n                        point.x - ScoreRenderer.WIDTH_DIFF,\n                        point.y,\n                        ),\n                );\n            }\n        }\n        return gameState;\n    }\n\n    public draw(g2d: CanvasRenderingContext2D) {\n        Sprite.draw(this.bonusPoses, g2d);\n\n        g2d.drawImage(Game.img_glossPanel, Game.STATUS_PANEL_X, 0, ScoreRenderer.WIDTH, ScoreRenderer.HEIGHT);\n\n        // 初期の設定を保存し,他のクラスが安全な描画を出来るようにする\n\n        // 文字列の色は白\n        g2d.fillStyle = \"white\";\n\n        // WAVE数の描画\n        {\n            g2d.font = \"bold 20px sans-serif\";\n            g2d.fillText(\"WAVE:\", Game.STATUS_PANEL_X + 20, ScoreRenderer.BOTTOM_Y_STRING_WAVE);\n\n            g2d.font = \"bold 32px sans-serif\";\n            const s = this.waveCount.toString();\n            const mea = g2d.measureText(s);\n            const x = Game.STATUS_PANEL_X + (ScoreRenderer.WIDTH / 2) - (mea.width / 2);\n            const y = ScoreRenderer.BOTTOM_Y_STRING_WAVE + 30;\n            g2d.fillText(s, x, y);\n        }\n        // BALLの数の描画\n        {\n            g2d.font = \"bold 20px sans-serif\";\n            g2d.fillText(\"BALL:\", Game.STATUS_PANEL_X + 20, ScoreRenderer.BOTTOM_Y_STRING_BALL);\n            g2d.drawImage(Game.img_ball, Game.STATUS_PANEL_X + (ScoreRenderer.WIDTH / 2) - (Ball.SIZE / 2), ScoreRenderer.BOTTOM_Y_STRING_BALL - Ball.SIZE);\n\n            g2d.font = \"bold 32px sans-serif\";\n            const s = this.ballCount.toString();\n            const mea = g2d.measureText(s);\n            const x = Game.STATUS_PANEL_X + (ScoreRenderer.WIDTH / 2) - (mea.width / 2);\n            const y = ScoreRenderer.BOTTOM_Y_STRING_BALL + 30;\n            g2d.fillText(s, x, y);\n        }\n        // SCOREの描画\n        {\n            g2d.font = \"bold 20px sans-serif\";\n            g2d.fillText(\"SCORE:\", Game.STATUS_PANEL_X + 20, ScoreRenderer.BOTTOM_Y_STRING_SCORE);\n\n            g2d.font = \"bold 32px sans-serif\";\n            const s = this.score.toString();\n            const mea = g2d.measureText(s);\n            const x = Game.STATUS_PANEL_X + (ScoreRenderer.WIDTH / 2) - (mea.width / 2);\n            const y = ScoreRenderer.BOTTOM_Y_STRING_SCORE + 30;\n            g2d.fillText(s, x, y);\n        }\n    }\n\n    public getBallCount() {\n        return this.ballCount;\n    }\n\n    public setBallCount(ballCount: number) {\n        this.ballCount = ballCount;\n    }\n\n    public getWaveCount() {\n        return this.waveCount;\n    }\n\n    public setWaveCount(waveCount: number) {\n        this.waveCount = waveCount;\n    }\n\n    public getScore() {\n        return this.score;\n    }\n\n    public setScore(score: number) {\n        this.score = score;\n    }\n}\n","import { Game } from \"./Game\";\nimport { GameState, State } from \"./GameState\";\n\nexport class SessionRenderer {\n    // GameOverの画像についてのhogehoge\n    private static DEFAULT_OPACITY = 0.2; // フェードインの最初の透明度(0に近いほど透明)\n    private static FADE_IN_SPEED   = 0.005; // 不透明になっていく定数\n    private static FIRST_IMG_Y     = -80; // フェードインの最初のy座標\n    private static END_IMG_Y       = -55;  // フェードインの最後のy座標\n    private static IMG_VY          = 0.14;   // フェードインの下へ降りてくる速さ\n    private static DELAY           = 70;    // フェードインが終わった後の間\n    private static TEXT_Y          = 460;  // \"YOUR SCORE\"の下のy座標\n    // タイトル画面の揺れる文字についてのhogehoge\n    private static MIN_TOP_TXET_Y = 454;  // 上\n    private static MAX_BOTTOM_TEXT_Y = SessionRenderer.TEXT_Y; // 下\n    private static VAULE_TEXT_Y_ADD = 0.14; // 揺れる速さ\n    private static TEXT_MENU = \"Click to start\";\n\n    private opacity = SessionRenderer.DEFAULT_OPACITY;\n    private img_y = SessionRenderer.FIRST_IMG_Y;\n    private delay = SessionRenderer.DELAY;\n    private text_y =  SessionRenderer.TEXT_Y;\n    private isText_y_up = false;\n\n    constructor() {\n        this.init();\n    }\n\n    public init() {\n        this.opacity = SessionRenderer.DEFAULT_OPACITY;\n        this.img_y = SessionRenderer.FIRST_IMG_Y;\n        this.delay = SessionRenderer.DELAY;\n        this.text_y = SessionRenderer.TEXT_Y;\n        this.isText_y_up = false;\n        console.log(\"init() SessionRenderer\");\n    }\n\n    public update(gameState: GameState) {\n        switch (gameState.state) {\n            case State.MAIN_MENU:\n                this.textMove(); // 文字を揺らす\n                break;\n            case State.GAMEOVER:\n                if (this.img_y < SessionRenderer.END_IMG_Y) { // 画像を下へ移動しながらフェードイン\n                    this.img_y += SessionRenderer.IMG_VY;\n                    this.opacity += SessionRenderer.FADE_IN_SPEED;\n                    if (this.opacity > 1.0) { this.opacity = 1.0; }\n                } else { // フェードインが終わったなら\n                    if (this.delay > 0) {\n                        --this.delay;    // 間を空ける\n                    } else {\n                        console.log(\"---RETURNABLE\");\n                        gameState.state = State.RETURNABLE_TO_MENU;\n                    }\n                }\n                break;\n        }\n        return gameState;\n    }\n\n    public draw(g2d: CanvasRenderingContext2D, gameState: GameState) {\n        switch (gameState.state) {\n            case State.MAIN_MENU:\n                this.drawMainMenu(g2d);\n                break;\n            case State.GAMEOVER:\n                this.drawGameOver(g2d);\n                break;\n            case State.RETURNABLE_TO_MENU:\n                this.drawGameOver(g2d);\n                this.drawScore(g2d, gameState.getScore());\n                break;\n        }\n    }\n\n    // タイトル画面の文字列を揺らす\n    private textMove() {\n        if (this.isText_y_up) {\n            if (this.text_y > SessionRenderer.MIN_TOP_TXET_Y) {\n                this.text_y -= SessionRenderer.VAULE_TEXT_Y_ADD;\n            } else {\n                this.isText_y_up = false;\n            }\n        } else {\n            if (this.text_y < SessionRenderer.MAX_BOTTOM_TEXT_Y) {\n                this.text_y += SessionRenderer.VAULE_TEXT_Y_ADD;\n            } else {\n                this.isText_y_up = true;\n            }\n        }\n    }\n\n    // フェードインが終わった後に描画する。最終的な結果を表示\n    private drawScore(g2d: CanvasRenderingContext2D, score: number) {\n\n        g2d.font = \"bold 20px sans-serif\";\n        g2d.fillStyle = \"white\";\n\n        g2d.fillText(\"Click to MAIN-MENU...\", 420, 520);\n\n        // \"YOUR SCORE\"の描画\n        {\n            const s = \"YOUR SCORE\";\n            g2d.font = \"bold 20px sans-serif\";\n            const mea = g2d.measureText(s);\n            g2d.fillText(s, Game.WIDTH / 2 - mea.width / 2, 370);\n        }\n        // 実際のスコアの数値を描画\n        {\n            const s = score.toString();\n            g2d.font = \"bold 75px sans-serif\";\n            const mea = g2d.measureText(s);\n            g2d.fillText(s, Game.WIDTH / 2 - mea.width / 2, 460);\n        }\n    }\n\n    private drawMainMenu(g2d: CanvasRenderingContext2D) {\n        g2d.drawImage(Game.img_logo, 0, 0);\n\n        // 揺れる文字を描画\n        {\n            g2d.font = \"bold 20px sans-serif\";\n            g2d.fillStyle = \"white\";\n\n            const mea = g2d.measureText(SessionRenderer.TEXT_MENU);\n            const x = Game.WIDTH / 2 - mea.width / 2; // 中心\n            g2d.fillText(SessionRenderer.TEXT_MENU, x, this.text_y);\n        }\n    }\n\n    // GameOverの画像をフェードインして描画\n    private drawGameOver(g2d: CanvasRenderingContext2D) {\n        // 初期の設定を保存(透明度)\n        g2d.save();\n\n        // // 透明にするためのインスタンスを取得\n        g2d.globalAlpha = this.opacity;\n        g2d.drawImage(Game.img_gameover, 0, this.img_y);\n\n        g2d.restore();\n    }\n}\n","import { Game } from \"./BlockBreaker\";\nGame.main();\n","export * from \"./Sprite\";\nexport * from \"./Ball\";\nexport * from \"./BallManager\";\nexport * from \"./Block\";\nexport * from \"./BonusPanel\";\nexport * from \"./BlockManager\";\nexport * from \"./RectBounds\";\nexport * from \"./CornerCollisionState\";\nexport * from \"./EightPointsCollisionState\";\nexport * from \"./ScoreRenderer\";\nexport * from \"./SessionRenderer\";\nexport * from \"./Game\";\n"],"sourceRoot":""}